name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

# Global environment variables will be set per job

jobs:
  security-checks:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check for secrets in code
        run: |
          echo "üîç Checking for potential secrets in code..."
          if (Select-String -Path "src" -Pattern "password|secret|key|token|api_key" -Exclude "node_modules" | Where-Object { $_.Line -notmatch "//|#|/\*|TODO|FIXME" }); then
            echo "‚ö†Ô∏è  Potential secrets found in code. Please review."
            exit 1
          fi
          echo "‚úÖ No obvious secrets found in code"

      - name: Check file sizes
        run: |
          echo "üìè Checking for large files..."
          Get-ChildItem -Recurse -File | Where-Object { $_.Length -gt 10MB } | Select-Object -First 10 | ForEach-Object { $_.FullName }
          echo "‚úÖ File size check completed"

      - name: Validate tauri.conf.json
        run: |
          echo "üîß Validating tauri configuration..."
          if (Select-String -Path "src-tauri/tauri.conf.json" -Pattern "REPLACE_WITH_YOUR_GENERATED_PUBLIC_KEY_BASE64"); then
            echo "‚ùå Public key not configured in tauri.conf.json"
            exit 1
          fi
          echo "‚úÖ tauri.conf.json properly configured"

      - name: Check signing keys
        run: |
          echo "üîë Checking signing keys..."
          if (-not (Test-Path "keys/tauri_private.pem")) {
            echo "‚ùå Private signing key not found"
            exit 1
          }
          if (-not (Test-Path "keys/tauri_public.pem")) {
            echo "‚ùå Public signing key not found"
            exit 1
          }
          echo "‚úÖ Signing keys found"

  release:
    needs: security-checks
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/tags/v*'
    permissions:
      contents: write
    runs-on: windows-latest
    env:
      # SQLCipher environment variables for Windows
      SQLCIPHER_LIB_DIR: C:\vcpkg\installed\x64-windows\lib
      SQLCIPHER_INCLUDE_DIR: C:\vcpkg\installed\x64-windows\include
      LIBSQLITE3_SYS_BUNDLED: '0'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install SQLCipher (Windows)
        run: |
          echo "üì¶ Installing SQLCipher on Windows..."
          # Install vcpkg and SQLCipher
          git clone https://github.com/microsoft/vcpkg.git C:\vcpkg
          C:\vcpkg\bootstrap-vcpkg.bat
          C:\vcpkg\vcpkg.exe install sqlcipher

          # Set environment variables
          echo "SQLCIPHER_LIB_DIR=C:\vcpkg\installed\x64-windows\lib" >> $env:GITHUB_ENV
          echo "SQLCIPHER_INCLUDE_DIR=C:\vcpkg\installed\x64-windows\include" >> $env:GITHUB_ENV
          echo "LIBSQLITE3_SYS_BUNDLED=0" >> $env:GITHUB_ENV

      - name: Install frontend dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build

      - name: Check signing configuration
        run: |
          if ("${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}" -ne "") {
            echo "üîê Signing key available - will sign release"
            echo "SIGNING_ENABLED=true" | Out-File -FilePath $env:GITHUB_ENV -Append
          } else {
            echo "‚ö†Ô∏è No signing key - will create unsigned release"
            echo "SIGNING_ENABLED=false" | Out-File -FilePath $env:GITHUB_ENV -Append
          }

      - name: Build and sign application
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: 'Import Manager v__VERSION__'
          releaseBody: |
            ## üîê Security Features
            - Database encryption with SQLCipher
            - Secure key management
            - Signed application updates

            ## üì¶ Installation
            Download the appropriate installer for your platform.

            ## üîÑ Auto-updates
            This version supports secure auto-updates.
          releaseDraft: true
          prerelease: false
          args: ''

      - name: Verify build artifacts
        run: |
          echo "üîç Verifying build artifacts..."
          ls -la src-tauri/target/release/
          echo "‚úÖ Build artifacts verified"

      - name: Create release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            src-tauri/target/release/*.msi
            src-tauri/target/release/*.exe
          draft: false
          prerelease: false
          generate_release_notes: true
          body: |
            ## üîê Security Features
            - Database encryption with SQLCipher
            - Secure key management via OS keychain
            - Signed application updates

            ## üì¶ Installation
            Download the appropriate installer for your platform.

            ## üîÑ Auto-updates
            This version supports secure auto-updates.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
